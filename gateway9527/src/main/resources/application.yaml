server:
  port: 9527

spring:
  application:
    name: cloud-gateway #以微服务注册进consul或nacos服务列表内
  cloud:
    consul: #配置consul地址
      host: localhost
      port: 8500
      discovery:
        prefer-ip-address: true
        service-name: ${spring.application.name}
    gateway:
      routes: #配置多个路由映射 一个路由对应一个微服务的一个handler的url访问地址
        - id: pay_routh1 #pay_routh1                #路由的ID(类似mysql主键ID)，没有固定规则但要求唯一，建议配合服务名
#          uri: http://localhost:8001                #匹配后提供服务的路由地址 问题：url(ip+端口号)写死,没法支持负载均衡
          uri: lb://cloud-payment-service          #匹配后提供服务的路由地址,lb表示支持负载均衡,后面跟微服务名,根据微服务名查找对应的微服务就能映射到,与微服务的ip和端口号没关系
          predicates: #路由条件接收一个参数返回一个布尔值
            - Path=/pay/gateway/get/** # 断言，访问路径相匹配的进行路由,判断是否找到对应的handler进行服务
#            - After=2024-03-11T09:43:42.551440800+08:00[Asia/Shanghai] #在规定时间后可以访问
#            - Before=2024-3-11T15:25:06.424566300+08:00[Asia/Shanghai] #超过规定时间不可访问
#            - Between=2023-11-21T17:38:13.586918800+08:00[Asia/Shanghai],2023-11-22T17:38:13.586918800+08:00[Asia/Shanghai] #在两个时间期间可以访问,等号后面有多个参数用,分隔
            - Cookie=username,ww # 第一个参数为cookie名,第二个参数为cookie值,取请求头中带来的Cookie参数,判断名和其值是否和该配置中的Cookie名和值相等,若相等则可以访问
#            - Header=X-Request-Id, \d+  # 请求头要有参数X-Request-Id属性并且值为整数的正则表达式,第一个参数为属性名X-Request-Id,第二个参数表示值为整数的正则表达式\d+,用于匹配该属性值是否为整数
#            - Host=**.atguigu.com #取请求头中的Host参数,判断其值是否为 .atguigu.com结尾,**代表任意值
#            - Query=username, \d+  # 地址栏查询请求参数,第一个参数为参数名username并且值还要是整数才能路由
#            - My=gold #等号前面的名字和XxxRoutePredicateFactory类的Xxx相同 shortcut配置
#            - name: My #full expended配置
#              args:
#                userType: gold



        - id: pay_routh2 #pay_routh2                #路由的ID(类似mysql主键ID)，没有固定规则但要求唯一，建议配合服务名
#          uri: http://localhost:8001                #匹配后提供服务的路由地址
          uri: lb://cloud-payment-service                #匹配后提供服务的路由地址
          predicates:
            - Path=/pay/gateway/info/**              # 断言，路径相匹配的进行路由

        - id: pay_routh3 #pay_routh3
          uri: lb://cloud-payment-service                #匹配后提供服务的路由地址
          predicates:
            - Path=/pay/gateway/filter/**          # 断言，路径相匹配的进行路由
#            - Path=/gateway/filter/**           # 访问handler完整url被分拆为: PrefixPath + Path
#            - Path=/XYZ/abc/{segment}           # 断言，为配合SetPath测试，{segment}的内容取代SetPath中的{segment},{segment}相等于sql中占位符?
          filters:
            - My=atguigu #自定义单一过滤器
#            - AddRequestHeader=X-Request-atguigu1,atguiguValue1  # 表示向请求体中添加参数并设置值,第一个参数为参数名,第二个参数为参数值,若添加多参则重写一行设置
#            - AddRequestHeader=X-Request-atguigu2,atguiguValue2
#            - RemoveRequestHeader=sec-fetch-site      # 根据请求头中的参数名sec-fetch-site从请求头中删除该参数,该请求送至微服务服务者时,请求头中就没了该参数
#            - SetRequestHeader=sec-fetch-mode, Blue-updatebyww # 将请求头sec-fetch-mode参数对应的值修改为Blue-updatebyww 修改请求头中某个参数的值
#            - AddRequestParameter=customerId,9527001 # 在url地址中新增请求参数Parameter：kv键值对形式,若url中原本有这个请求参数,则不会再新增.值还是原来的
#            - RemoveRequestParameter=customerName   # 根据请求参数名删除url中的请求参数customerName,传递给微服务服务者获取不到该请求参数,即方法返回null
#            - AddResponseHeader=X-Response-atguigu, BlueResponse # 在响应头中新增响应参数X-Response-atguigu并设值为BlueResponse
#            - SetResponseHeader=Date,2099-11-11 # 修改响应头Date参数值为2099-11-11 修改响应头中参数的值
#            - RemoveResponseHeader=Content-Type # 将响应头中默认自带Content-Type响应参数删除 根据响应参数名删除
#            - PrefixPath=/pay # http://localhost:9527/pay/gateway/filter/** PrefixPath + Path 相当于说前缀被过滤器统一管理了在发送给微服务服务者前加上前缀使url完整 但实际调用地址为 http://localhost:9527/gateway/filter
#            - SetPath=/pay/gateway/{segment}  # {segment}表示占位符，{名字随意}abc也行但要上下一致(Path和SetPath中),Path值将被SetPath值替换,{segment}的值和Path中的{segment}相同
#            - RedirectTo=302, http://www.atguigu.com/ # 访问http://localhost:9527/pay/gateway/filter时会跳转到http://www.atguigu.com/ 302表示资源重定向
